#!/bin/bash 

#
# How often does the watchdog look for unmounts and/or IP address changes for 
# Blob endpoints. 
#
MONITOR_INTERVAL_SECS=5

# Load common aznfs helpers.
. /opt/microsoft/aznfs/common.sh

# Create the MOUNTMAP if it does not exist.
if [ ! -f $MOUNTMAP ]; then
    touch $MOUNTMAP
fi

# Create the LOGFILE if it does not exist.
if [ ! -f $LOGFILE ]; then
    touch $LOGFILE
fi

# 
# Watchdog for monitoring unmounts and more importantly change in blob endpoint
# addresses possibly as a result of migration. 
#
while :; do
    sleep $MONITOR_INTERVAL_SECS

    findmnt=$(findmnt --raw --noheading -o MAJ:MIN,FSTYPE,SOURCE,TARGET,OPTIONS -t nfs)
    if [ $? -ne 0 ]; then
        eecho "findmnt failed!"
        # Hope things improve next time around!
        continue
    fi

    # Nothing mounted, so nothing to check.
    if [ -z "$findmnt" ]; then
        continue
    fi

    #
    # Go over all lines in $MOUNTMAP and check them for two things:
    # 1. Is that entry still mounted, if not remove the entry.
    # 2. Has the Blob endpoint address changed from what is stored?
    #    If yes, update DNAT rule to point to the new address.
    #
    # Sample line in $MOUNTMAP.
    # account.blob.preprod.core.windows.net:/testaccount/testcontainer 10.100.100.100 52.230.170.200
    # 
    # where the format is
    # <blobendpoint>:/account/container LOCAL_IP blobendpoint_ip
    # 
    IFS=$'\n' lines=$(cat $MOUNTMAP) 

    for line in $lines; do
        if [ -z "$line" ]; then
            continue
        fi

        l_share=$(echo "$line" | awk '{print $1}')
        l_host=$(echo "$l_share" | cut -d: -f1)
        l_dir=$(echo "$l_share" | cut -d: -f2)
        l_ip=$(echo "$line" | awk '{print $2}')
        l_nfsip=$(echo "$line" | awk '{print $3}')

        if [ -z "$l_host" -o -z "$l_dir" -o -z "$l_ip" -o -z "$l_nfsip" ]; then 
            wecho "Deleting invalid line in $MOUNTMAP: [$line]."
            update_mountmap sed -i "/$line/d" $MOUNTMAP 
            continue 
        fi

        # Since we added it to the MOUNTMAP file, it cannot be invalid.
        if ! is_private_ip "$l_ip"; then
            eecho "[FATAL] local ip ($l_ip) is invalid!"
            continue
        fi

        # Since we added it to the MOUNTMAP file, it cannot be invalid.
        if ! is_valid_ipv4_address "$l_nfsip" || is_private_ip "$l_nfsip"; then
            eecho "[FATAL] Blob endpoint ip ($l_nfsip) is invalid!"
            continue
        fi

        #
        # Local share name. Note that we mount the local IP and not the actual
        # Blob endpoint IP and map local IP to actual Blob endpoint IP using
        # DNAT rule.
        #
        m_share="$l_ip:$l_dir"

        #
        # Delete entry from MOUNTMAP if share is unmounted.
        # TODO: What if user unmounts and mounts before MONITOR_INTERVAL_SECS secs?
        #
        if ! echo "$findmnt" | grep " nfs $m_share " > /dev/null; then
            # delete the line from MOUNTMAP file.
            pecho "[$(date -u)] Deleting unmounted share ${m_share}."
            update_mountmap sed -i "/ $l_ip $l_nfsip/d" $MOUNTMAP
            delete_iptable_entry $l_ip $l_nfsip
        fi

        #
        # Check if blob endpoint IP address changed.
        # This is the migration check.
        #
        new_ip=$(resolve_ipv4 "$l_host")

        # If we fail to resolve the host name, try next time.
        if [ $? -ne 0 ]; then
            eecho "resolve_ipv4($l_host) failed!"
            continue
        fi

        if ! is_valid_ipv4_address "$new_ip"; then
            eecho "resolve_ipv4($l_host) returned invalid IPv4 address ($new_ip)!"
            continue
        fi

        #
        # If the IP changed for the Blob endpoint, we need to update the DNAT rule.
        # This will take care of migration/failover causing the Blob endpoint IP to change.
        #
        # TODO: Make this less frequent than the unmount check.
        #
        # echo "$l_host: new_ip=$new_ip, l_nfsip=$l_nfsip"
        #
        if [ "$new_ip" != "$l_nfsip" ]; then 
            pecho "IP for $l_host changed [$l_nfsip -> $new_ip]."
            update_mountmap sed -i "/ $l_ip $l_nfsip/d" $MOUNTMAP

            # Delete old DNAT rule and the conntrack entry to stop current active connections too.
            delete_iptable_entry $l_ip $l_nfsip
            conntrack -D conntrack -p tcp -d "$l_ip" -r "$l_nfsip"

            add_iptable_entry $l_ip $new_ip

            # Add new entry in MOUNTMAP if it doesn't already exist.
            grep -q "$l_host:$l_dir $l_ip $new_ip" $MOUNTMAP
            if [ $? -ne 0 ]
                update_mountmap echo "$l_host:$l_dir $l_ip $new_ip" >> $MOUNTMAP
            fi
        fi 
    done 
done