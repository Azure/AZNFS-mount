#!/bin/bash 

#
# Load the functions used for logging.
# 
. /sbin/log

# 
# This stores the map of local IP and share name and external blob endpoint IP. 
# 
MOUNTMAP="/run/azblobnfs/mountmap"

# 
# Default order in which we try the network prefixes for a free local IP to use. 
# This can be overriden using AZFS_IP_PREFIXES environment variable. 
# 
DEFAULT_AZFS_IP_PREFIXES="10.100 192.168 172.16" 

IP_PREFIXES="${AZFS_IP_PREFIXES:-${DEFAULT_AZFS_IP_PREFIXES}}" 

# 
# Check if the given string is a correctly formatted IPv6 address. 
# 
function is_valid_ipv6_address() 
{
    # First line does basic sanity check, needed to weed out CIDR format addresses. 
    [[ $1 =~ ^[a-fA-F0-9:]+$ ]] && 
    ip -6 route save match "$1" > /dev/null 2>&1 
} 

# 
# Check if the given string is a valid IPv4 address. 
# 
function is_valid_ipv4_address() 
{ 
    # ip route allows 10.10 as a valid address and treats it as 10.10.0.0, so we need the first coarse filter too. 
    [[ $1 =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]] && 
    ip -4 route save match $1 > /dev/null 2>&1 
} 

# 
# Check if the given string is probably a hostname (as opposed to an IP address). 
# 
function is_probably_hostname() 
{ 
    ! ip route save match $1 > /dev/null 2>&1
} 

#
# Check if the given string is a valid blob FQDN (<accountname>.blob.core.windows.net).
#
function is_valid_blob_fqdn() 
{ 
    # XXX Are there other valid blob endpoint fqdns? 
    [[ $1 =~ ^([a-z0-9]{3,24}).blob(.preprod)?.core.windows.net$ ]] 
} 

# 
# Blob fqdn to IPv4 adddress. 
# 
function resolve_ipv4() 
{ 
    local hname="$1" 

    # 
    # If already IPv4 address, return it. 
    # 
    if ! is_probably_hostname "$hname"; then 
        pecho "$hname" 
        return 0 
    fi 

    # 
    # else, resolve hostname to IPv4 address. 
    # 
    host_op=$(host -4 -t A "$hname") 
    if [ $? -ne 0 ]; then 
        eecho "Bad server: $hname" 
        return 1 
    fi 

    # 
    # TODO: We should disallow ZRS endpoints which resolve to multiple addresses. 
    #       Though we should handle public ZRS endpoints for handling cases where 
    #       the currently connected cluster goes down. 
    # 
    local cnt_ip=$(echo "$host_op" | grep " has address " | awk '{print $4}' | wc -l) 

    if [ $cnt_ip -ne 1 ]; then 
        eecho "host returned $cnt_ip address(es) for $hname, expected 1" 
        return 1 
    fi 

    local ipv4_addr=$(echo "$host_op" | grep " has address " | head -n1 | awk '{print $4}') 
    
    if ! is_valid_ipv4_address "$ipv4_addr"; then 
        eecho "host returned bad IPv4 address $ipv4_addr for hostname $hname!!" 
        return 1 
    fi 

    echo $ipv4_addr 
    return 0 
}

# 
# Get host from host:/dir 
# 
function get_host_from_share() 
{ 
    local share="$1" 
    echo $share | cut -d: -f1 
} 

# 
# Get dir from host:/dir 
# 
function get_dir_from_share() 
{ 
    local share="$1" 
    echo $share | cut -d: -f2 
} 

#
# Is the given address one of the host addresses? 
# 
function is_host_ip() 
{ 
    # XXX Don't make this local as status gathering doesn't work well when collecting command o/p to local variables. 
    route=$(ip -4 route get fibmatch $1 2>/dev/null) 
    if [ $? -ne 0 ]; then 
        return 1 
    fi 

    if ! echo "$route" | grep -q "scope host"; then 
        return 1 
    fi 

    return 0 
} 

# 
# Is the given address one of the addresses directly reachable from the host? 
# 
function is_link_ip() 
{ 
    # XXX Don't make this local as status gathering doesn't work well when collecting command o/p to local variables. 
    route=$(ip -4 route get fibmatch $1 2>/dev/null) 
    if [ $? -ne 0 ]; then 
        return 1 
    fi 

    if ! echo "$route" | grep -q "scope link"; then 
        return 1 
    fi 

    return 0 
} 

# 
# Check if a given IPv4 address is responding to ICMP pings. 
# Uses a 3 secs timeout to bail out in time if address is not responding. 
# 
function is_pinging() 
{ 
    local ip=$1; 

    # 3 secs timeout should be good. 

    ping -4 -W3 -c1 $ip > /dev/null 
} 


# 
# Get a local IP that's free to use. 
# 
function get_free_local_ip() 
{ 
    for ip_prefix in $IP_PREFIXES; do 

        local local_ip="" 

        # Start from 100 onwards to make azfs local addresses more identifiable. 

        for ((_3rdoctet=100; _3rdoctet<255; _3rdoctet++)) { 
            ip_prefix="${ip_prefix}.$_3rdoctet" 

            if is_host_ip $ip_prefix; then 
                echo "$ip_prefix is host network!" 1>&2 
                continue 
            fi 

            if is_link_ip $ip_prefix; then 
                echo "$ip_prefix is link network!" 1>&2 
                continue 
            fi 

            break 
        } 

        if [ $_3rdoctet -eq 255 ]; then 
            continue 
        fi 

        if [ -z "$ip_prefix" ]; then 
            eecho "ip_prefix is nil!" 
            return 1 
        fi 

        for ((_4thoctet=100; _4thoctet<255; _4thoctet++)) { 
            local_ip="${ip_prefix}.$_4thoctet" 

            if egrep "\<$local_ip\>" $MOUNTMAP >/dev/null; then 
                pecho "$local_ip is in use by azfs!" 1>&2 
                continue; 
            fi 

            # 
            # TODO: Do ping check to be sure the address is not in use in 
            #       the client's network. 
            # 

            pecho "Using local IP $local_ip for azfs" 1>&2 
            break 
        } 

        if [ $_4thoctet -eq 255 ]; then 
            continue
        fi 

        if [ -z "$local_ip" ]; then 
            eecho "local_ip is nil!" 
            return 1 
        fi 

        # Happy path! 
        echo "$local_ip" 
        return 0 
    done 

    # 
    # If we come here we didn't get a free address to use. 
    # 

    eecho "Couldn't find a free local IP to use for azfs using DEFAULT_AZFS_IP_PREFIXES=$DEFAULT_AZFS_IP_PREFIXES!" 
    eecho "Set AZFS_IP_PREFIXES env variable correctly to provide free addresses for use by azfs!" 

    return 1 
} 

#
# MOUNTMAP is accessed by both mount.azfs and azfswatchdog service. Update it only after taking exclusive lock. 
#
function update_mountmap() 
{ 
    flock /run/azblobnfs/mountmap -c "eval $*" 
}

# [52.239.178.215:/nfsv3stdaccount20/fstestbase3 /mnt/azfs -o rw,tcp,nolock,nconnect=16] 
pecho "Got arguments: [$*]" 

#
# Check if MOUNTMAP file exists.
#
if [ -f $MOUNTMAP ] then
    pecho "MOUNTMAP exist."
else
    eecho "MOUNTMAP doesn't exist."
    exit 1
fi

#
# Check if azfs watchdog service is running. 
#
is_azfswatchdog_active = $(systemctl is-active --quiet azfswatchdog) 

if [ $is_azfswatchdog_active -ne 0 ]
    eecho "Azfs Watchdog not running"
    exit 1
fi

nfs_host=$(get_host_from_share "$1") 

if ! is_valid_blob_fqdn $nfs_host; then 
    eecho "Not a valid Azure Blob NFS endpoint: $nfs_host" 
    exit 1 
fi
 
nfs_ip=$(resolve_ipv4 $nfs_host) 

if [ -z "$nfs_ip" ]; then 
    eecho "Cannot resolve IP address for $nfs_host!" 
    exit 1 
fi 

nfs_dir=$(get_dir_from_share "$1") 

if [ -z "$nfs_dir" ]; then 
    # TODO: Check for /account/container format. 
    eecho "Improper share name: $1" 
    exit 1 
fi 

mount_point="$2" 
mount_options="$4" 
 
local_ip=$(get_free_local_ip) 

echo "nfs_host=[$nfs_host]" 
echo "nfs_ip=[$nfs_ip]" 
echo "nfs_dir=[$nfs_dir]" 
echo "mount_point=[$mount_point]" 
echo "mount_options=[$mount_options]" 
echo "local_ip=$local_ip" 

# 
# Set DNAT rule for forwarding local_ip traffic to the actual blob endpoint IP. 
#
iptables -t nat -A OUTPUT -p tcp -d "$local_ip" -j DNAT --to-destination "$nfs_ip" 

if [ $? -ne 0 ]; then 
    eecho "iptables failed to set DNAT rule [$local_ip -> $nfs_ip]" 
    exit 1 
fi

mount -t nfs -o "$mount_options" "${local_ip}:${nfs_dir}" "$mount_point" 

if [ $? -ne 0 ]; then 
    eecho "mount failed!" 
    # clear the DNAT rule. 
    iptables -t nat -D OUTPUT -p tcp -d "$local_ip" -j DNAT --to-destination "$nfs_ip" 
    exit 1 
fi 

# Update MOUNTMAP.
update_mountmap echo "$nfs_host:$nfs_dir $local_ip $nfs_ip" >> $MOUNTMAP
 