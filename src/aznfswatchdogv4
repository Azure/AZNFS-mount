#!/bin/bash

# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------

#
# Watchdog for monitoring unmounts and stunnel processes
#

#
# Kill stunnel process and clean up stunnel files generated by aznfs mount helper
#
cleanup_stunnel_files()
{
    local l_conf=$1
    local l_log=$2
    local l_pid=$3

    # Kill stunnel process first.
    pid=$(cat $l_pid)
    kill -9 $pid
    if [ $? -ne 0 ]; then
        eecho $LOG_V3 "[FATAL] Unable to kill stunnel process $pid!"
    fi

    # Cleanup stunnel files
    rm $l_log
    if [ $? -ne 0 ]; then
        eecho $LOG_V3 "[FATAL] Unable to delete stunnel log file $l_log!"
    fi

    rm $l_pid
    if [ $? -ne 0 ]; then
        eecho $LOG_V3 "[FATAL] Unable to delete stunnel pid file $l_pid!"
    fi

    chattr -if $l_conf
    rm $l_conf
    if [ $? -ne 0 ]; then
        eecho $LOG_V3 "[FATAL] Unable to delete stunnel conf file $l_conf!"
    fi
}

#
# Delete entry from MOUNTMAPv4.
#
ensure_mountmapv4_not_exist()
{
    (
        flock -e 999

        #
        # If watchdog wants to delete the entry only if MOUNTMAPv4 has not changed since
        # watchdog looked up, honour that.
        #
        local ifmatch="$2"
        if [ -n "$ifmatch" ]; then
            local mtime=$(stat -c%Y $MOUNTMAPv4)
            if [ "$mtime" != "$ifmatch" ]; then
                eecho $LOG_V3 "[$1] Refusing to remove from ${MOUNTMAPv4} as $mtime != $ifmatch!"
                return 1
            fi
        fi

        chattr -f -i $MOUNTMAPv4
        #
        # We overwrite the file instead of inplace update by sed as that has a
        # very bad side-effect of creating a new MOUNTMAPv4 file. This breaks
        # any locking that we dependent on the old file.
        #
        out=$(sed "\%^${1}$%d" $MOUNTMAPv4)
        ret=$?
        if [ $ret -eq 0 ]; then
            #
            # If this echo fails then MOUNTMAPv4 could be truncated.
            #
            echo "$out" > $MOUNTMAPv4
            ret=$?
            out=
            if [ $ret -ne 0 ]; then
                eecho $LOG_V3 "*** [FATAL] MOUNTMAPv4 may be in inconsistent state, contact Microsoft support ***"
            fi
        fi

        if [ $ret -ne 0 ]; then
            chattr -f +i $MOUNTMAPv4
            eecho $LOG_V3 "[$1] failed to remove from ${MOUNTMAPv4}!"
            return 1
        fi
        chattr -f +i $MOUNTMAPv4

        # Return the mtime after our mods.
        echo $(stat -c%Y $MOUNTMAPv4)
    ) 999<$MOUNTMAPv4
}

process_nfsv4_mounts()
{
    local l_host
    local l_conf
    local l_log
    local l_pid
    local l_checksumhash

    epoch_now=$(date +%s)

    #
    # Go over all lines in MOUNTMAPv4 and check them for two things:
    # 1. Is that entry still in use by at least one aznfs mount, if not remove the entry.
    # 2. Is stunnel process running?
    #
    # We store the mtime of MOUNTMAPv4 while inside the lock so that if any mount helper process
    # updates it after this we will skip modification for sake of safety. We will come to it
    # in the next iteration when it's safer.
    #
    exec {fd}<$MOUNTMAPv4
    flock -e $fd
    mtime_mountmap=$(stat -c%Y $MOUNTMAPv4)
    IFS=$'\n' lines=$(cat $MOUNTMAPv4)
    flock -u $fd
    exec {fd}<&-

    #
    # findmnt must be done after reading MOUNTMAPv4 so that if we come accross a
    # MOUNTMAPv4 entry whose all nfs file shares are unmounted, we know
    # for sure that it's not in use by any mount and can be removed.
    #
    findmnt=$(findmnt | grep 'nfs4\|$LOCALHOST' 2>&1)

    #
    # For no matching mounts also, findmnt exits with a failure return, so check
    # for both exit status and non-empty error o/p.
    #
    if [ $? -ne 0 -a -n "$findmnt" ]; then
        eecho $LOG_V4 "${findmnt}."
        eecho $LOG_V4 "[FATAL] findmnt failed unexpectedly!"
        eecho $LOG_V4 "[FATAL] Azfilenfs-watchdog service is exiting, will not monitor Azure NFS file shares."
        eecho $LOG_V4 "[FATAL] Please contact Microsoft support before using any NFS File shares."
        # This usually indicates some non-transient issue, bail out.
        exit 1
    fi

    for line in $lines; do
        if [ -z "$line" ]; then
            continue
        fi

        #
        # MOUNTMAPv4 line is of the form:
        # account.file.preprod.core.windows.net;<stunnel_account.file.preprod.core.windows.net.conf path>;<stunnel_account.file.preprod.core.windows.net.log path>;<stunnel_account.file.preprod.core.windows.net.pid path>;<checksumHash>
        #
        IFS=";" read l_host l_conf l_log l_pid l_checksumhash <<< "$line"

        if [ -z "$l_host" -o -z "$l_conf" -o -z "$l_pid" ]; then
            wecho $LOG_V4 "[FATAL] Deleting invalid line in $MOUNTMAPv4: [$line]!"
            l_mtime=$(ensure_mountmapv4_not_exist "$line")
            [ $? -eq 0 ] && mtime_mountmap=$l_mtime
            continue
        fi

        accept_port=$(cat $l_conf | grep accept | cut -d ':' -f 2)
        vecho $LOG_V4 "accept_port: $accept_port"

        #
        # Delete entry from MOUNTMAPv4 if there are no mounted shares on that host.
        # As long as we have at least one mount using the MOUNTMAPv4 entry, we leave
        # it around.
        #
        if ! echo "$findmnt" | grep "$accept_port" >/dev/null; then
            pecho "${LOG_V4} No mounted shares for host $l_host, deleting from ${MOUNTMAPv4} [$line]."

            cleanup_stunnel_files $l_conf $l_log $l_pid

            # Delete IFF mountmap is not changed since we read it above.
            l_mtime=$(ensure_mountmapv4_not_exist "$line" "$mtime_mountmap")

            #
            # Update ifmatch time in case of successful updation of MOUNTMAPv4,
            # so that we can distinguish between MOUNTMAPv4 mtime changing because
            # of our action or some mount helper changing it. In the former case
            # it's safe to update the MOUNTMAPv4, so update mtime_mountmap to the
            # mtime after this update.
            #
            [ $? -eq 0 ] && mtime_mountmap=$l_mtime
            continue
        else
            # Check if checksumHash for stunnel.conf file has changed.
            # Customers should not modify stunnel.conf files created by aznfs mount helper.
            checksumHash=`cksum $l_conf | awk '{print $1}'`
            if [ $? -ne 0 ]; then
                eecho $LOG_V4 "Failed to get the checksum hash of file: '${l_conf}'!"
            fi

            if [ $checksumHash != $l_checksumhash ]; then
                eecho $LOG_V4 "'${l_conf}' file has modified!"
                eecho $LOG_V4 "It's not recommended to modify '${l_conf}' file created by aznfs mount helper!"
                eecho $LOG_V4 "watchdog service will do cleanup, kill stunnel process with pid:$(cat $l_pid) and remove '${l_conf}'; '${l_log}'; '${l_pid}'!"
                eecho $LOG_V4 "Please remount the shares from ${l_host} using aznfs mount helper."

                cleanup_stunnel_files $l_conf $l_log $l_pid

                # Delete IFF mountmap is not changed since we read it above.
                l_mtime=$(ensure_mountmapv4_not_exist "$line" "$mtime_mountmap")
                [ $? -eq 0 ] && mtime_mountmap=$l_mtime
                continue
            fi

            is_stunnel_running=$(netstat -anp | grep stunnel | grep `cat $l_pid`)
            if [ -z "$is_stunnel_running" ]; then
                vecho $LOG_V4 "stunnel is not running! Restarting the stunnel"

                stunnel_status=$(stunnel $l_conf 2>&1)
                if [ -n "$stunnel_status" ]; then
                    used_port=$(cat $l_conf | grep accept | cut -d: -f2)
                    is_binding_error=$(echo $stunnel_status | grep "$LOCALHOST:$used_port: Address already in use")
                    is_caroot_cert_failure=$(echo $stunnel_status | grep "certificate verify failed")
                    if [ -n "$is_binding_error" ]; then
                        eecho $LOG_V4 "[FATAL] Restarting stunnel failed.$used_port port is already being used by other process.!"
                        eecho $LOG_V4 "It's recommended to unmount all shares from $l_host and then remount shares using aznfs mount helper!"
                    elif [ -n "$is_caroot_cert_failure" ]; then
                        eecho $LOG_V4 "[FATAL] Restarting stunnel failed. CA root certificate is either missing or is unable to authenticate TLS server certificate."
                        eecho $LOG_V4 "Please download the CA root certificate from https://learn.microsoft.com/en-us/azure/security/fundamentals/azure-ca-details"
                        eecho $LOG_V4 "It's recommended to unmount all shares from $l_host and then remount shares using aznfs mount helper!"
                    else
                        eecho $LOG_V4 "[FATAL] watchdog service is unable to start stunnel process for '${l_conf}'!"
                        eecho $LOG_V4 "Please check the stunnel logs in $l_log for more details."
                        eecho $LOG_V4 "It's recommended to unmount all shares from $l_host and then remount shares using aznfs mount helper!"
                    fi
                fi
            else
                vecho $LOG_V4 "stunnel is running!!"
            fi
        fi
    done
}

# Load common aznfs helpers.
. /opt/microsoft/aznfs/common.sh

vecho $LOG_V4 "Starting aznfswatchdog for NFSv4..."

# Detect and log distro, bash and AZNFS-mount version
log_version_info

# Create NFSv4 mount map file
touch_mountmapv4

if ! chattr -f +i $MOUNTMAPv4; then
    wecho $LOG_V4 "chattr does not work for ${MOUNTMAPv4}!"
fi

while :; do
    sleep $MONITOR_INTERVAL_SECS
    vecho $LOG_V4 "Processing NFSv4 mounts..."
    process_nfsv4_mounts
done