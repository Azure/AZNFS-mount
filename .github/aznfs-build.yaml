parameters:
  - name: publish_artifacts
    displayName: 'Publish Artifacts to Linux Repos'
    type: boolean
    default: false

  - name: draft
    displayName: 'Post as Draft Release'
    type: boolean
    default: false

  - name: prerelease
    displayName: 'Post as PreRelease'
    type: boolean
    default: false

  - name: update_version
    displayName: 'Update Version'
    type: boolean
    default: false

  - name: versionName
    displayName: "Version Name"
    type: string
    default: "0.0.0"

  - name: buildType
    displayName: 'Turbo Client build type'
    type: string
    default: 'Release'

# Do not trigger this pipeline automatically
trigger:
  - none

# Do not trigger this pipeline by pull requests
pr:
  - none

# The ADO variable group that keeps the code sign secrets
variables:
- group: AZNFS

# ADO pipelines documentation:
# https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&tabs=yaml
stages:
  - stage: BuildPackages
    displayName: "Build and Package Artifacts"
    jobs:
      - job: package_mount_helper_arm64
        displayName: Package and Release ${{ parameters.versionName }} for arm64
        pool:
          vmImage: "ubuntu-22.04"
          platform: 'arm64'

        steps:
        
          - script: uname -m
            displayName: "Build Agent Architecture"

          # - script: |
          #     echo "Building version ${{ parameters.versionName }}"
          #   displayName: "Print Version Info"

          - checkout: self
            path: arm64/AZNFS-mount
            displayName: 'Checkout repository'

          - script: |
              sudo apt update
              sudo apt install -y patchelf
            displayName: "Install patchelf"
          
          - script: |
              export RELEASE_NUMBER=${{ parameters.versionName }}
              export STG_DIR=$(System.DefaultWorkingDirectory)
              export SOURCE_DIR=$(System.DefaultWorkingDirectory)
              export BUILD_TYPE=${{ parameters.buildType }}
              chmod +x $SOURCE_DIR/generate_package.sh
              $SOURCE_DIR/generate_package.sh
            displayName: "Run Package Script"

          - script: |
              mkdir -p $(Build.ArtifactStagingDirectory)/artifacts
              for dir in deb rpm suse stunnel; do
                mkdir -p $(Build.ArtifactStagingDirectory)/artifacts/$dir
              done
              cp -f $(System.DefaultWorkingDirectory)/deb/aznfs-${{ parameters.versionName }}-1_arm64.deb $(Build.ArtifactStagingDirectory)/artifacts/deb
              #for dir in rpm suse stunnel; do
              #  cp -f $(System.DefaultWorkingDirectory)/$dir/root/rpmbuild/RPMS/aarch64/aznfs-${{ parameters.versionName }}-1.aarch64.rpm $(Build.ArtifactStagingDirectory)/artifacts/$dir
              #done
              echo "Listing Built Files..."
              ls -R $(Build.ArtifactStagingDirectory)
            displayName: "List Build Outputs"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(Build.ArtifactStagingDirectory)
              artifactName: 'aznfs-temp'

  - stage: ReleaseArtifacts
    displayName: "Sign and Release Artifacts"
    jobs:
      - job: SignArtifacts
        timeoutInMinutes: 120

        pool:
          vmImage: 'ubuntu-20.04'
        
        steps:
          - checkout: none

          # download artifacts that need to be published
          - task: DownloadBuildArtifacts@1
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'aznfs-temp'
              downloadPath: $(Build.ArtifactStagingDirectory)

          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
            displayName: 'List Artifacts'

          - script: |
              sudo apt -y update
              wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
              sudo dpkg -i packages-microsoft-prod.deb
              sudo apt update 
              sudo apt install apt-transport-https -y
              sudo apt install dotnet-sdk-3.1 -y
            displayName: "Update dependencies"

          - task: EsrpCodeSigning@5
            displayName: 'ESRP CodeSigning MI DEB'
            inputs:
              ConnectedServiceName: 'Azure AZNFS'
              AppRegistrationClientId: $(AppRegistrationClientId)
              AppRegistrationTenantId: $(AppRegistrationTenantId)

              UseMSIAuthentication: true
              AuthAKVName: $(AuthAKVName)
              AuthSignCertName: $(AuthSignCertName)

              FolderPath: $(Build.ArtifactStagingDirectory)/aznfs-temp/artifacts/deb
              Pattern: '*.deb'
              SessionTimeout: 90
              ServiceEndpointUrl: 'https://api.esrp.microsoft.com/api/v2'
              MaxConcurrency: 25
              signConfigType: inlineSignParams
              VerboseLogin: true
              inlineOperation: |
                [
                {
                  "KeyCode": "CP-450779-Pgp",
                  "OperationCode": "LinuxSign",
                  "ToolName": "sign",
                  "ToolVersion": "1.0",
                  "Parameters": {}
                }
                ]

          - task: EsrpCodeSigning@5
            displayName: 'ESRP CodeSigning MI RPM'
            inputs:
              ConnectedServiceName: 'Azure AZNFS'
              AppRegistrationClientId: $(AppRegistrationClientId)
              AppRegistrationTenantId: $(AppRegistrationTenantId)

              UseMSIAuthentication: true
              AuthAKVName: $(AuthAKVName)
              AuthSignCertName: $(AuthSignCertName)

              FolderPath: $(Build.ArtifactStagingDirectory)/aznfs-temp/artifacts/rpm
              Pattern: '*.rpm'
              SessionTimeout: 90
              ServiceEndpointUrl: 'https://api.esrp.microsoft.com/api/v2'
              MaxConcurrency: 25
              signConfigType: inlineSignParams
              VerboseLogin: true
              inlineOperation: |
                [
                {
                  "KeyCode": "CP-450779-Pgp",
                  "OperationCode": "LinuxSign",
                  "ToolName": "sign",
                  "ToolVersion": "1.0",
                  "Parameters": {}
                }
                ]
          
          - task: EsrpCodeSigning@5
            displayName: 'ESRP CodeSigning MI SUSE'
            inputs:
              ConnectedServiceName: 'Azure AZNFS'
              AppRegistrationClientId: $(AppRegistrationClientId)
              AppRegistrationTenantId: $(AppRegistrationTenantId)

              UseMSIAuthentication: true
              AuthAKVName: $(AuthAKVName)
              AuthSignCertName: $(AuthSignCertName)

              FolderPath: $(Build.ArtifactStagingDirectory)/aznfs-temp/artifacts/suse
              Pattern: '*.rpm'
              SessionTimeout: 90
              ServiceEndpointUrl: 'https://api.esrp.microsoft.com/api/v2'
              MaxConcurrency: 25
              signConfigType: inlineSignParams
              VerboseLogin: true
              inlineOperation: |
                [
                {
                  "KeyCode": "CP-450779-Pgp",
                  "OperationCode": "LinuxSign",
                  "ToolName": "sign",
                  "ToolVersion": "1.0",
                  "Parameters": {}
                }
                ]

          - task: EsrpCodeSigning@5
            displayName: 'ESRP CodeSigning MI STUNNEL'
            inputs:
              ConnectedServiceName: 'Azure AZNFS'
              AppRegistrationClientId: $(AppRegistrationClientId)
              AppRegistrationTenantId: $(AppRegistrationTenantId)

              UseMSIAuthentication: true
              AuthAKVName: $(AuthAKVName)
              AuthSignCertName: $(AuthSignCertName)

              FolderPath: $(Build.ArtifactStagingDirectory)/aznfs-temp/artifacts/stunnel
              Pattern: '*.rpm'
              SessionTimeout: 90
              ServiceEndpointUrl: 'https://api.esrp.microsoft.com/api/v2'
              MaxConcurrency: 25
              signConfigType: inlineSignParams
              VerboseLogin: true
              inlineOperation: |
                [
                {
                  "KeyCode": "CP-450779-Pgp",
                  "OperationCode": "LinuxSign",
                  "ToolName": "sign",
                  "ToolVersion": "1.0",
                  "Parameters": {}
                }
                ]

           # Validate signed images have md5sum changed
          - script: |
              chmod 755 $(Build.ArtifactStagingDirectory)/aznfs-temp/artifacts/deb/*.deb
              chmod 755 $(Build.ArtifactStagingDirectory)/aznfs-temp/artifacts/*/*.rpm
              rm -rf $(Build.ArtifactStagingDirectory)/aznfs-temp/*.md
              rm -rf $(Build.ArtifactStagingDirectory)/aznfs-temp/artifacts/*/*.md
              mv $(Build.ArtifactStagingDirectory)/aznfs-temp/* $(Build.ArtifactStagingDirectory)/
              rm -rf $(Build.ArtifactStagingDirectory)/aznfs-temp/
            displayName: 'Make Artifacts executable'

          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)/artifacts/*
            displayName: 'List Signed Artifacts'

          # Push signed images to artifact directory
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'aznfs-signed'
            displayName: 'Publish Signed Artifacts'

  - stage: PublishArtifacts
    dependsOn: ReleaseArtifacts
    condition: succeeded('ReleaseArtifacts')
    displayName: "Publish Artifacts"
    jobs:
      - job: PublishArtifacts
        timeoutInMinutes: 120
      
        pool:
          vmImage: 'ubuntu-20.04'

        variables:
            - name: root_dir
              value: '$(System.DefaultWorkingDirectory)'

        steps:
          - checkout: none

          - task: PipAuthenticate@1
            inputs:
              artifactFeeds: 'One/aznfs'
          - script: pip install pmc-cli
            displayName: 'Install pmc-cli'

          # Download artifacts that need to be published
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Signed Artifacts'
            inputs:
             artifactName: 'aznfs-signed'
             downloadPath: $(Build.ArtifactStagingDirectory)

          - script: |
              sudo ls -lRt $(Build.ArtifactStagingDirectory)
            displayName: 'List Signed Artifacts'

          # Format of packages.csv : <Distro Name>,<Architecture, File Type>,<Repo Name>,<Release Name(for deb repos only)>
          - script: |
              wget https://raw.githubusercontent.com/Azure/AZNFS-mount/main/packages.csv -O packages.csv
              cat ./packages.csv
            displayName: 'Fetch packages.csv'
            workingDirectory: $(Build.ArtifactStagingDirectory)/


          - task: AzureCLI@2
            inputs:
              addSpnToEnvironment: true
              azureSubscription: 'Azure AZNFS'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                  # pmc --base-url "https://pmc-ingest.trafficmanager.net/api/v4" repo list --limit 1

                  aznfsids=`pmc --base-url "https://pmc-ingest.trafficmanager.net/api/v4" package rpm list --name aznfs`
                  echo "AZNFS rpm list ==========: $aznfsids"

                  # upload packages
                  pmc --base-url "https://pmc-ingest.trafficmanager.net/api/v4" package upload $(Build.ArtifactStagingDirectory)/aznfs-signed/artifacts

                  #################################### get package ids #####################################

                  aznfsDeb=`pmc --base-url "https://pmc-ingest.trafficmanager.net/api/v4" --id-only package upload $(Build.ArtifactStagingDirectory)/aznfs-signed/artifacts/deb/aznfs*-1_amd64.deb`
                  echo "AZNFS DEB Package ID: $aznfsDeb"

                  aznfsRpm=`pmc --base-url "https://pmc-ingest.trafficmanager.net/api/v4" --id-only package upload $(Build.ArtifactStagingDirectory)/aznfs-signed/artifacts/rpm/aznfs*-1.x86_64.rpm`
                  echo "AZNFS RPM Package ID: $aznfsRpm"

                  aznfsRpmSles=`pmc --base-url "https://pmc-ingest.trafficmanager.net/api/v4" --id-only package upload $(Build.ArtifactStagingDirectory)/aznfs-signed/artifacts/suse/aznfs*-1.x86_64.rpm`
                  echo "AZNFS Sles RPM Package ID: $aznfsRpmSles"

                  aznfsRpmStunnel=`pmc --base-url "https://pmc-ingest.trafficmanager.net/api/v4" --id-only package upload $(Build.ArtifactStagingDirectory)/aznfs-signed/artifacts/stunnel/aznfs*-1.x86_64.rpm`
                  echo "AZNFS Stunnel RPM Package ID: $aznfsRpmStunnel"

                  ################################### Add uploaded packages to its repository ######################################
                  echo "now adding packages to repositories..."

                  while IFS=, read -r distro PackageArchType repoName releaseName; do
                    echo "Uploading packages for $distro"
                    pmc --base-url "https://pmc-ingest.trafficmanager.net/api/v4" repo package update --add-packages ${!PackageArchType} $repoName $releaseName
                  done < <(tail -n +3 $(Build.ArtifactStagingDirectory)/packages.csv)

                  #################################### Publish the repositories #####################################

                  while IFS=, read -r distro PackageArchType repoName releaseName; do
                    echo "Publishing for $distro to $repoName"
                    pmc --base-url "https://pmc-ingest.trafficmanager.net/api/v4" repo publish $repoName
                  done < <(tail -n +3 $(Build.ArtifactStagingDirectory)/packages.csv)

  